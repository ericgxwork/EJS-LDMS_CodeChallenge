Test script for testing employee creation
-----------------------------------------

1) Using SQL+/TOAD/SQLDEveloper Log into user account
2) Set serveroutput on
3) Modify variable initializations for testing various scenarios
--
DECLARE
    -- Variable declarations
    l_PTO_EMPLOYEE_ID     NUMBER;
    l_PTM_EMPLOYEE_NAME   VARCHAR2 (500);
    l_PTM_JOB_TITLE       VARCHAR2 (500);
    l_PTO_MANAGER_ID      NUMBER;
    l_PTM_DATE_HIRED      DATE;
    l_PTM_SALARY          NUMBER;
    l_PTM_DEPARTMENT_ID   NUMBER;
    l_PC_STATUS           VARCHAR2 (32767);
    l_PN_ERR_NO           NUMBER;
    l_PC_ERR_MSG          VARCHAR2 (32767);
    l_PC_ERR_LVL          VARCHAR2 (32767);
    PROCEDURE OUTPUT_LINE (a VARCHAR2)
    AS
    BEGIN
        IF LENGTHB (a) <= 32767
        THEN
            SYS.DBMS_OUTPUT.put_line (a);
        ELSE
            SYS.DBMS_OUTPUT.put_line (SUBSTRB (a, 1, 32767));
        END IF;
    END;
BEGIN
    -- Variable initializations
    l_PTO_EMPLOYEE_ID := NULL;
    l_PTM_EMPLOYEE_NAME := NULL;
    l_PTM_JOB_TITLE := NULL;
    l_PTO_MANAGER_ID := NULL;
    l_PTM_DATE_HIRED := NULL;
    l_PTM_SALARY := NULL;
    l_PTM_DEPARTMENT_ID := NULL;
    -- Call
    PKG_EMPLOYEE_MAINTENANCE.P_CREATE_EMPLOYEE (
        PTO_EMPLOYEE_ID     => l_PTO_EMPLOYEE_ID,
        PTM_EMPLOYEE_NAME   => l_PTM_EMPLOYEE_NAME,
        PTM_JOB_TITLE       => l_PTM_JOB_TITLE,
        PTO_MANAGER_ID      => l_PTO_MANAGER_ID,
        PTM_DATE_HIRED      => l_PTM_DATE_HIRED,
        PTM_SALARY          => l_PTM_SALARY,
        PTM_DEPARTMENT_ID   => l_PTM_DEPARTMENT_ID,
        PC_STATUS           => l_PC_STATUS,
        PN_ERR_NO           => l_PN_ERR_NO,
        PC_ERR_MSG          => l_PC_ERR_MSG,
        PC_ERR_LVL          => l_PC_ERR_LVL);
    -- DBMS_OUTPUT statements
    OUTPUT_LINE ('PC_STATUS = ' || l_PC_STATUS);
    OUTPUT_LINE ('PN_ERR_NO = ' || l_PN_ERR_NO);
    OUTPUT_LINE ('PC_ERR_MSG = ' || l_PC_ERR_MSG);
    OUTPUT_LINE ('PC_ERR_LVL = ' || l_PC_ERR_LVL);
    OUTPUT_LINE ('');
END;
--
Scenarios to test:

Positive tests
-------------
1) Create employee next in sequence
Expected result
PC_STATUS = 0
PN_ERR_NO = 10000
PC_ERR_MSG = Record created Employee ID:90013
PC_ERR_LVL = I
Use following statement to check result
SELECT * FROM EMPLOYEES ORDER BY 1 DESC
Employee should be first record returned

2) Create employee for fixed id 1
Expected result
PC_STATUS = 1
PN_ERR_NO = 10000
PC_ERR_MSG = Record created Employee ID:1
PC_ERR_LVL = I
Use following statement to check result
SELECT * FROM EMPLOYEES ORDER BY 1
Employee should be first record returned

Negative tests
--------------
For all tests below no employee record should be created user
SELECT * FROM EMPLOYEES ORDER BY 1
1) Create duplicate employee (Run positive 2 test twice)
PC_STATUS = 0
PN_ERR_NO = 50000
PC_ERR_MSG = Employee already exists
PC_ERR_LVL = E

2) Missing parameters
Pass NULL for employee name
PC_STATUS = 0
PN_ERR_NO = -1400
PC_ERR_MSG = ORA-01400: cannot insert NULL into ("EJS"."EMPLOYEES"."EMPLOYEE_NAME")
PC_ERR_LVL = F
To be repeated for all relevant parameters

3) Salary < 0
PC_STATUS = 0
PN_ERR_NO = 50015
PC_ERR_MSG = Salary must be greater or equal to 0
PC_ERR_LVL = E

4) Manager does not exist
PC_STATUS = 0
PN_ERR_NO = 50005
PC_ERR_MSG = Manager does not exist
PC_ERR_LVL = E

5) Department does not exists
PC_STATUS = 0
PN_ERR_NO = 50010
PC_ERR_MSG = Department does not exist
PC_ERR_LVL = E

Boundary tests
--------------
1) Exceed variable length 
Pass name larger than 50 characters
PC_STATUS = 0
PN_ERR_NO = -12899
PC_ERR_MSG = ORA-12899: value too large for column "EJS"."EMPLOYEES"."EMPLOYEE_NAME" (actual: 73, maximum: 50)
PC_ERR_LVL = F
To be repeated for all relevant parameters


